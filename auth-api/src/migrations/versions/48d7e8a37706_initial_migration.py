"""Initial migration

Revision ID: 48d7e8a37706
Revises:
Create Date: 2022-02-26 19:52:47.470353

"""
# type: ignore
from uuid import uuid4

import sqlalchemy as sa
from alembic import op
from sqlalchemy import MetaData, Table
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '48d7e8a37706'
down_revision = None
branch_labels = None
depends_on = None

platformenum = sa.Enum('pc', 'mobile', 'tablet', name='platformenum', schema='auth')


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('CREATE SCHEMA auth;')
    op.create_table(
        'roles',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=True),
        sa.Column('description', sa.String(length=255), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__roles')),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('name'),
        schema='auth',
    )
    op.create_table(
        'users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=True),
        sa.Column('password', sa.String(length=255), nullable=False),
        sa.Column('first_name', sa.String(length=255), nullable=True),
        sa.Column('last_name', sa.String(length=255), nullable=True),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('confirmed', sa.Boolean(), nullable=False, default=False),
        sa.Column('confirmed_on', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__users')),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('email', 'username'),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    op.create_table(
        'roles_users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(
            ['role_id'], ['auth.roles.id'], name=op.f('fk__roles_users__role_id__roles')
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['auth.users.id'], name=op.f('fk__roles_users__user_id__users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk__roles_users')),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    op.create_table(
        'users_auth_history',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('timestamp', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('user_agent', sa.Text(), nullable=False),
        sa.Column('ip_addr', sa.String(length=100), nullable=True),
        sa.Column('device', sa.Text(), nullable=False),
        sa.Column('platform', platformenum, server_default='pc', nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        schema='auth',
        postgresql_partition_by='LIST (platform)',
    )

    # Ищем существующую таблицу
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=('roles',), schema='auth')
    roles_table = Table('roles', meta, schema='auth')

    # Создаем роли по умолчанию, необходимые для назначения базовых разрешений
    op.bulk_insert(
        roles_table,
        [
            {
                'id': str(uuid4()),
                'name': 'guest',
                'description': 'Пользователь онлайн-кинотеатра с базовыми разрешениями.',
            },
            {
                'id': str(uuid4()),
                'name': 'superuser',
                'description': 'Пользователь с правами администратора (есть все разрешения без их явного назначения).',
            },
            {
                'id': str(uuid4()),
                'name': 'staff',
                'description': 'Сотрудник кинотеатра, имеющий доступ к службе администрирования.',
            },
        ],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_auth_history', schema='auth')
    op.drop_table('roles_users', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_table('roles', schema='auth')
    platformenum.drop(op.get_bind(), checkfirst=False)
    op.execute('DROP SCHEMA auth;')
    # ### end Alembic commands ###
